{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 4;\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar ox;\n\tvar oy;\n\tvar m;\n\tvar i;\n\tif ( N <= 0 || alpha === 0.0 ) {\n\t\treturn y;\n\t}\n\tox = arraylike2object( x );\n\toy = arraylike2object( y );\n\tif ( ox.accessorProtocol || oy.accessorProtocol ) {\n\t\taccessors( N, alpha, ox, strideX, offsetX, oy, strideY, offsetY );\n\t\treturn oy.data;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t\tiy += strideY;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn y;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ty[ iy ] += alpha * x[ ix ];\n\t\t\ty[ iy+1 ] += alpha * x[ ix+1 ];\n\t\t\ty[ iy+2 ] += alpha * x[ ix+2 ];\n\t\t\ty[ iy+3 ] += alpha * x[ ix+3 ];\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn y;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ iy ] += alpha * x[ ix ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Multiplies a vector `x` by a constant and adds the result to `y`.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Object} y - output array object\n* @param {Collection} y.data - output array data\n* @param {Array<Function>} y.accessors - array element accessors\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n*\n* gaxpy( x.length, 5.0, arraylike2object( toAccessorArray( x ) ), 1, 0, arraylike2object( toAccessorArray( y ) ), 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar xbuf;\n\tvar ybuf;\n\tvar set;\n\tvar get;\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\t// Cache references to array data:\n\txbuf = x.data;\n\tybuf = y.data;\n\n\t// Cache references to element accessors:\n\tget = x.accessors[ 0 ];\n\tset = y.accessors[ 1 ];\n\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( ybuf, iy, get( ybuf, iy ) + ( alpha * get( xbuf, ix ) ) );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Multiplies `x` by a constant and adds the result to `y`.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\nfunction gaxpy( N, alpha, x, strideX, y, strideY ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to multiply `x` and a constant and add the result to `y`.\n*\n* @module @stdlib/blas-base-gaxpy\n*\n* @example\n* import gaxpy from '@stdlib/blas-base-gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy( x.length, alpha, x, 1, y, 1 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*\n* @example\n* import gaxpy from '@stdlib/blas-base-gaxpy';\n*\n* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n* var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n* var alpha = 5.0;\n*\n* gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 );\n* // y => [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["M","gaxpy","N","alpha","x","strideX","offsetX","y","strideY","offsetY","ix","iy","ox","oy","m","i","arraylike2object","accessorProtocol","xbuf","ybuf","set","get","data","accessors","ndarray","stride2offset","setReadOnly","main"],"mappings":";;mUA4BA,IAAIA,EAAI,EA0BR,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,GAC1D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAKb,GAAK,GAAe,IAAVC,EACd,OAAOI,EAIR,GAFAK,EAAKI,EAAkBZ,GACvBS,EAAKG,EAAkBT,GAClBK,EAAGK,kBAAoBJ,EAAGI,iBAE9B,OClBF,SAAgBf,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,GAC1D,IAAIS,EACAC,EACAC,EACAC,EACAX,EACAC,EACAI,EAYJ,IATAG,EAAOd,EAAEkB,KACTH,EAAOZ,EAAEe,KAGTD,EAAMjB,EAAEmB,UAAW,GACnBH,EAAMb,EAAEgB,UAAW,GAEnBb,EAAKJ,EACLK,EAAKF,EACCM,EAAI,EAAGA,EAAIb,EAAGa,IACnBK,EAAKD,EAAMR,EAAIU,EAAKF,EAAMR,GAASR,EAAQkB,EAAKH,EAAMR,IACtDA,GAAML,EACNM,GAAMH,CAGR,CDREe,CAAWrB,EAAGC,EAAOS,EAAIP,EAASC,EAASO,EAAIL,EAASC,GACjDI,EAAGS,KAMX,GAJAZ,EAAKJ,EACLK,EAAKF,EAGY,IAAZJ,GAA6B,IAAZG,EAAgB,CAIrC,IAHAM,EAAIZ,EAAIF,GAGC,EACR,IAAMe,EAAI,EAAGA,EAAID,EAAGC,IACnBR,EAAGI,IAAQR,EAAQC,EAAGM,GACtBA,GAAML,EACNM,GAAMH,EAGR,GAAKN,EAAIF,EACR,OAAOO,EAER,IAAMQ,EAAID,EAAGC,EAAIb,EAAGa,GAAKf,EACxBO,EAAGI,IAAQR,EAAQC,EAAGM,GACtBH,EAAGI,EAAG,IAAOR,EAAQC,EAAGM,EAAG,GAC3BH,EAAGI,EAAG,IAAOR,EAAQC,EAAGM,EAAG,GAC3BH,EAAGI,EAAG,IAAOR,EAAQC,EAAGM,EAAG,GAC3BA,GAAMV,EACNW,GAAMX,EAEP,OAAOO,CACP,CACD,IAAMQ,EAAI,EAAGA,EAAIb,EAAGa,IACnBR,EAAGI,IAAQR,EAAQC,EAAGM,GACtBA,GAAML,EACNM,GAAMH,EAEP,OAAOD,CACR,CEzDA,SAASN,EAAOC,EAAGC,EAAOC,EAAGC,EAASE,EAAGC,GACxC,OAAOgB,EAAStB,EAAGC,EAAOC,EAAGC,EAASoB,EAAevB,EAAGG,GAAWE,EAAGC,EAASiB,EAAevB,EAAGM,GAClG,CCMAkB,EAAAC,EAAA,UAAAH"}